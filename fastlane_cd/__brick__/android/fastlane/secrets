fastlane_require 'openssl'
fastlane_require 'digest/sha1'
fastlane_require 'encryptor'
fastlane_require 'securerandom'
fastlane_require 'find'
fastlane_require 'digest'

desc "Encrypts the files for build server usage"
    lane :encrypt do
    key = prompt(
      text: "Encryption key: ",
      secure_text: true
    )

    encrypt_secrets(
      directory: KEY_FILES_DIRECTORY,
      password: key
    )
end

### Encryption    
def encrypt_secrets(params)
  password = params[:password]
  directory = params[:directory]
  supported_extensions = [".p12",".cer", ".mobileprovision", ".jks", ".properties", ".json"]

  UI.message("Start file encryption:")
  Find.find(directory) do |file|
    next if !supported_extensions.include?(File.extname(file))

    key = Digest::SHA2.hexdigest password

    secret_key = key[0, 32]
    iv = key[0, 12]

    content = File.read(file)
    encrypted_value = Encryptor.encrypt(value: content, key: secret_key, iv: iv)

    File.write("#{file}.enc", encrypted_value)

    UI.success("Encrypted: #{file}")
  end
end

def delete_unencrypted_secrets(directory)
	supported_extensions = [".p12", ".cer", ".jks", ".properties", ".json"]

	Find.find(directory) do |file|
		next if !supported_extensions.include?(File.extname(file))
		UI.message("Delete #{file}")
		FileUtils.rm_f(file)
	end
end

### Decryption
def decrypt_secrets(params = {:password => KEY_FILES_PASSWORD, :directory => KEY_FILES_DIRECTORY})
	password = params[:password]
	directory = params[:directory]

	raise "No decrypt password given" if password.nil?

	supported_extensions = [".enc"]

	Find.find(directory) do |file|
			next if !supported_extensions.include?(File.extname(file))

			key = Digest::SHA2.hexdigest password

			secret_key = key[0, 32]
			iv = key[0, 12]

			content = File.read(file)
			# it is intended to use 'encrypt'
			decrypted_value = Encryptor.encrypt(value: content, key: secret_key, iv: iv)
			decrypted_file_name = "#{File.dirname(file)}/#{File.basename(file, ".enc")}"

			# ensure files contain only utf-8 encoding and no garbage
			# the last line in these files has to be empty
			if decrypted_file_name.include?('json') || decrypted_file_name.include?('properties')
					File.open("#{decrypted_file_name}", 'w') do |out_file|
						decrypted_value.each_line do |line|
							 begin
									out_file.puts line if line.encode("utf-8").valid_encoding?
							 rescue
							 end
						end
					end
			else
					File.write("#{decrypted_file_name}", decrypted_value)
			end

			UI.success("Decrypted file: #{decrypted_file_name}")
	end
end
